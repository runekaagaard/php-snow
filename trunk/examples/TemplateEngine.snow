@str template_dir
    %->file_exists or throw new Exception("{%} doesn't exist!")
class TemplateEngine
    pro
        str
            template_content
            var_format = .setVarFormat('{%s}')
            var_open
            var_close
        arr
            vals
            available_funcs = ['iif' 'loop' 'qs']
            default_vals = ['_self':_SERVER['PHP_SELF'] '_query_string':_SERVER['QUERY_STRING']]
        int
            var_max_len
            func_max_len = array_reduce(array_map('strlen' .available_funcs) 'max' 0)
            
    fn register(template)
        <- false when !.template_dir,template->file_exists
        .template_content ,= .template_dir,template->file_get_contents
        <- true
    
    # vals can be an array or a string
        if vals->is_array it gets merged with the class vals
        else vals is used as key and val as value and get appended to class vals
    fn assign(vals val='')
        if vals->is_array: *.vals->array_merge(vals)
        else: .vals[vals] = val
          
    fn printOut(ret = false)
        <- false when .template_content->empty
        
        .parseIncludes()
        .parseVars()
        .parseFuncs()
        
        <- .template_content when ret
        echo .template_content
        <- true
    
    fn parseVars
        *.vals->array_merge(.default_vals)
        for k v in .vals
            .template_content = str_replace(.var_open,k,.var_close v .template_content)
            
    fn includeAt(var template)
        <- false when !.template_dir,template->file_exists
        temp = .template_dir,template->file_get_contents
        .template_content = str_replace(.var_open,var,.var_close temp .template_content)
        <- true
        
    fn parseFuncs
        #find starting point
        pos = .template_content->strpos('[')
        
        while pos !== false
            #find opening brace
            brace_pos = .template_content->strpos('(' pos)
            #func is everything between [ and (
            func = .template_content->substr(pos+1 brace_pos-pos-1)->trim
            if brace_pos !== false && func->strlen <= .func_max_len
                continue when !func->in_array(.available_funcs)
                #now find closing brace
                close_brace_pos = .template_content->strpos(')' brace_pos)
                close_bracket_pos = .template_content->strpos(']' close_brace_pos)
                
                #compose 'real' method name
                call_func = 'UDF_',func
                params = .template_content->substr(brace_pos+1 close_brace_pos-brace_pos-1)->explode(',')
                
                replace = call_func->call_user_func_array(params)
                
                *.template_content->substr_replace(replace pos (close_bracket_pos+1)-pos)
                pos += replace->strlen
                
            else
                #if brace_pos == false, we can safely assume there are no remaining functions, so put pointer at end of stream
                pos = if brace_pos === false
                    <-- .template_content->strlen
                else #func name too long
                    # find a [ between pos and brace_pos
                    tmp_pos = .template_content->substr(0 brace_pos+1)->strripos('[' pos+1)
                    if tmp_pos === false
                        <-- brace_pos
                    else
                        <-- tmp_pos - 1
            pos = .template_content->strpos('[' pos-1)
            
    pri fn UDF_iif(cond, iftrue, iffalse): <- (cond ? iftrue : iffalse)
    
    pri fn UDF_loop(array_var loop_string)
        array_var = str_replace('%' '' array_var)->trim
        
        ret_var = ''
        
        <- false when !.vals[array_var]->isset || !.vals[array_var]->is_array
        
        for k v in .vals[array_var]
            <- false when !v->is_array
            
            tmp = loop_string
            for k2 v2 in v
                tmp = str_replace("%{array_var}[k2]%" v2 tmp)
                
                ret_var ,= tmp
            
        <- ret_var    

    pri fn UDF_qs(var val)
        qs = _SERVER['QUERY_STRING']
        qsa = []
        qs->parse_str(qsa)
        qsa[var] = val
        <- '?',qsa->http_build_query
    
    pri fn parseIncludes
        pattern = "/\[\[(.*)\]\]/"
        preg_match_all(pattern .template_content matches)
        <- false when matches->empty
        for x=0 to matches[0]->count
            to_replace = if !.template_dir,matches[1][x]->file_exists
                #replace var with empty contents
                <-- '' 
            else
                <-- .template_dir,matches[1][x]->file_get_contents
            .template_content = str_replace(matches[0][x] to_replace .template_content)
        #recurse!
        .parseIncludes()
        
    
    
    fn setVarFormat(format)
        list(.var_open .var_close) = explode('%s' format 2)
        
    fn setTemplateContent(content) .template_content = content