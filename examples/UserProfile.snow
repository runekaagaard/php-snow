import '../../../blocks_base/UserProfileBase.snow'
@PDO pdo
class UserProfile extends UserProfileBase
    str
        _explicitType = 'nl.domain.game.userdata.UserProfile'
        uid
        email
        nick
        pass
        firstName
        suffix
        lastName
        gender
    int
        id
    pro int login_errno
    pro PDO pdo
    
    @uid
    fn retrieveUserProfile
        stmt = .pdo.prepare(getRetrieveUserQuery())
        stmt.execute([uid, uid])
        
        if stmt.rowCount() == 1
            list(result) = stmt.fetchAll(PDO::FETCH_ASSOC)
            result->initFromArray
            
        <- .
        
    @email
    fn emailExists
        <- .valueExists('email' email)
        
    @nick
    fn nickExists
        <- .valueExists('nick' nick)
        
    @field
    @value
    fn valueExists
        stmt = .pdo.prepare(sprintf('select %1$s from user where lower(%1$s) = lower(?)' field))
        stmt.execute([value->trim])
        <- stmt.rowCount() > 0
        
    @email
    @pass
    fn valid
        fields = .getProfileFields()
        farbissina = ['_explicitType' 'id' 'pass']
        for x = 0 to fields.sizeof
            unset(fields[x]) when fields[x].in_array(farbissina) # Doesn't this just look beautiful?
        columns = implode(',' fields)
        sql = 'SELECT' , columns , ' FROM user WHERE (lower(email) = lower(?) or lower(nick) = lower(?)) and pass = ?'
        stmt = .pdo.prepare(sql)
        stmt.execute([email email pass])
        
        <- if stmt.rowCount() == 1
            list(result) = stmt.fetchAll(PDO::FETCH_ASSOC)
            initFormArray(result)
            <-- true
        else
            sql = 'select email from user where lower(email) = lower(?)
            stmt = pdo.prepare(sql)
            stmt.execute([email])
            .login_errno = stmt.rowCount() == 1 ? 1 : 2
            <-- false
        
    @name
    fn isBlackListed
        sql = 'select * from username_blacklist u where lower(name) = substring(?, 1, length(name))'
        stmt = .pdo.prepare(sql)
        stmt.execute([name])
        
        <- stmt.rowCount() > 0
        
    @name
    fn getSuggestions
        stmt = .pdo.prepare('call getSuggestions(?, ?)')
        stmt.execute([name, 3])
        result = stmt.fetchAll(PDO::FETCH_ASSOC)
        ret = []
        for row in result: ret[] = row['name']
        <- ret
        
    @field
    pro fn outputFilter
        <- true
        
    @email
    fn getUIDFromEmail
        sql = 'select uid from user where lower(email) = lower(?)
        stmt = .pdo.prepare(sql)
        stmt.execute([email])
        
        <- false when stmt.rowCount() == 0
        list(result) = stmt.fetchAll(PDO::FETCH_ASSOC)
        
        <- result['uid']
        
    fn getRetrieveUserQuery
        columns = .getProfileFields(true)
        for x = 0 to columns->sizeof: unset(columns[x]) when columns[x] == '_explicitType'
        columns = implode(',' columns)
        sql = 'select ' , columns , ' from user where cast(id as char) = ? or uid = ?'
        <- sql
        
    fn getUpsertUserQuery
        fields = .getProfileFields
        for x = 0 to fields->sizeof: unset(fields[x]) when fields[x] == '_explicitType'
        
        columns = implode(',' fields) # -> id,uid,email
        values = ':' , implode(',:' fields) # -> :id,:uid,:email
        updates = array_map(field => return sprintf('%s=values(%s)' field field) fields) # trying out some scala-style lambda hehe
                                                                                         # looks nice, don't know if it works though :p
        updates = implode(',' updates) # -> id=values(id),uid=values(uid),email=values(email)
        
        sql = 'insert into user(' , columns , ',regdate)
                values(' , values , ',now())
                on duplicate key update ' , updates
        <- sql
        
    fn getUpdateFields
        rc = ReflectionClass(.)
        props = rc.getProperties(ReflectionProperty::IS_PUBLIC)
        new_props = []
        for prop in props: new_props[prop.name] = .{prop.name} when prop.name != '_explicitType'
        <- new_props
        
    fn getArray
        unset(.pdo)
        return (array).