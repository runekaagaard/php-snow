#summary The usages of function and methods
<wiki:toc/>

==Introduction==
Snow provides several enhancements to both defining and calling functions:
 * The `function` keyword has been shortened to `fn`.
 * For functions without arguments the trailing `()` must be omitted.
 * Adds a new postfix `->` keyword for receivers functions.
 * Provides for supereasy argument validation.
 * Removes the duplication of information between the docblocks and the code.
== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    <tr>
        <td>
{{{
fn foo
    pass
foo()
}}}
        </td>
        <td>
{{{
function foo() {
    // Stub.
}
foo();
}}}
        </td>
    </tr>
    <tr>
        <td>
{{{
fn bar(x y)
    pass
}}}
        </td>
        <td>
{{{
function bar($x, $y) {
    // Stub.
}
}}}
        </td>
    </tr>
    <tr>
        <td>
{{{
@arr baz
    # Argument comment.
fn bar
    # Function comment header.
        Function comment body.
    pass
}}}
        </td>
        <td>
{{{
/*
 * Function comment header.
 *
 * Function comment body.
 *
 * @param array $baz
 *   Argument comment.
 */
function bar($baz) {
    
}
}}}
        </td>
    </tr>
    <tr>
        <td>
{{{
fn foo()
    pass
}}}
        </td>
        <td>ERROR. Trailing parenthesis must be omitted when the function does 
        not have any arguments.
        </td>
    </tr>
    <tr>
        <td>
{{{
@int x
    # An integer bigger than 0.
    _ < 0
@int y
    # An integer bigger than 0 and smaller than $x.
    [_ < 0: '$y must be bigger than 0'
     _ >= x: '$y must be smaller than $x'
     !is_foo(_): NotFooException("Not foo!")]
@return int
def subtract
    # Subtracts $y from $x.
        Only works for positive returns.
    <- x - y
}}}
        </td>
        <td>
{{{
/**
 * Subtracts $y from $x.
 *
 * Only works for positive returns.
 *
 * @param int $x
 *   An integer bigger than 0.
 * @param int $y
 *   An integer bigger than 0 and smaller than $x.
 * @return int
 */
function subtract($x, $y) {
    if ($x < 0) {
        throw new InvalidArgumentException();
    }
    if ($y < 0) {
        throw new InvalidArgumentException('$y must be bigger than 0.');
    }
    if ($y >= $x) {
        throw new InvalidArgumentException('$y must be smaller than $x.');
    }
    if (!is_foo($y)) {
        throw new NotFooException("Not foo!");
    }
    return $x - $y;
}
}}}
        </td>
    </tr>
    <tr>
        <td>
{{{
str->ucfirst->strtolower
}}}
        </td>
        <td>
{{{
ucfirst(strtolower($str));
}}}
        </td>
    </tr>
    <tr>
        <td>
{{{
foo->bar(baz);
}}}
        </td>
        <td>
{{{
bar($foo, $baz);
}}}
        </td>
    </tr>
</table>

== Receiver syntax ==

A common paradigm in Snow is to use so-called `receiver functions`.

A receiver function is an expression followed by a single arrow `->`followed by 
a function name, optionally followed by `(arg2, arg3)` as additional arguments.
The expression will be used as the first argument to the function. Receiver
functions can be chained as `myvar->myfunc1(arg2)->myfunc2`.

Unlike the tradition way of calling function the trailing parenthesis must be 
omitted for receiver functions calls without arguments.

=== Examples ===
{{{
str = "Hello, World!\n"
str = str->strtolower       # call the function `strtolower` with parameter `str` and assign the result to `str`
                                When there are no extra arguments, the parentheses must be omitted
len = str->strlen           # assign the length of `str` to `len`
hello = str->substr(0 5)    # assign the characters 0-5 of `str` to `hello`
}}}
The above examples can be written using the standard syntax as follows:
{{{
str = "Hello, World!\n"
str = strtolower(str)
len = strlen(str)
hello = substr(str 0 5)
}}}
