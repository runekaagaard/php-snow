#summary One-sentence summary of this page.

==Introduction==
Like in most languages, in Snow functions are basic building blocks.

==Calling functions==
There are two different syntaxes for calling functions in Snow.

===Standard syntax===

====Definition====
{{{
[ <identifier> "=" ] <function-identifier> "(" [ <parameter-list> ] ")"
<parameter-list> ::= ( <identifier> | <constant> ) ( [ " " ( <identifier> | <constant> ) ] )*
}}}

Some examples:

Examples without return value:
{{{
someFunction()          # function call without specifying parameters
someOtherFunction(42)   # function call with constant parameter
a = 42                  # assign the value `42` to the variable `a` 
someOtherFunction(a)    # pass `a` as parameter to function `someOtherFunction`
}}}

Examples with return value:
{{{
a = someFunction()          # call function `someFunction` and assign its return value to variable `a`
b = someOtherFunction(42)
}}}

As you can see, even when no parameters are specified, the trailing parenthesis are mandatory.

===Receiver syntax===

A common paradigm in Snow is to use so-called `receiver functions`.
It is not so much the functions themselves that differ from normal functions but their way of being called. The trailing parenthesis can be omitted for functions calls without arguments.

====Definition====
{{{
[ <identifier> "=" ] ( <identifier> | <constant> ) "->" <function-identifier> [ "(" [ <parameter-list> ] ")" ]
}}}

Examples:
{{{
str = "Hello, World!\n"
str = str->strtolower       # call the function `strtolower` with parameter `str` and assign the result to `str`
                                As there are no extra parameters specified, the parentheses can be omitted
len = str->strlen           # assign the length of `str` to `len`
hello = str->substr(0 5)    # assign the characters 0-5 of `str` to `hello`
}}}
The above examples can be written in the conventional as follows:
{{{
str = "Hello, World!\n"
str = strtolower(str)
len = strlen(str)
hello = substr(str 0 5)
}}}