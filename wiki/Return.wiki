#summary Inner and outer returns.
#labels _
<wiki:toc/>

== Introduction ===
Snow renames the return keyword to `<-` and introduces `<--` as an inner return 
that works inside all control structures. The inner return allows for an control 
structure to return a value which can either be stored to a variable or returned 
from the function.

== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    <tr>
        <td><- some_var</td>
        <td>return $some_var</td>
    </tr>
    <tr>
        <td valign="top" cellpadding="0">
{{{
fn double(int n): <- n ∗ n
}}}
        </td>
        <td valign="top" cellpadding="0">
{{{
function double($n) {
    return $n ∗ $n;
}
}}}
        </td>
    </tr>
    <tr>
        <td valign="top" cellpadding="0">
{{{
a = if b > 3
    <-- 42
else
    <-- 666
}}}
        </td>
        <td valign="top" cellpadding="0">
{{{
if ($b > 3) {
    $a = 42;
} else {
    $a = 666;
}
}}}
        </td>
    </tr>
    <tr>
        <td valign="top" cellpadding="0">
{{{
<- if b > 3
    <-- 42
else
    <-- 666
}}}
        </td>
        <td valign="top" cellpadding="0">
{{{
if ($b > 3) {
    return 42;
} else {
    return 666;
}
}}}
        </td>
    </tr>
    <tr>
        <td valign="top" cellpadding="0">
{{{
@array ints
fn process_ints
    return_code = for i in ints
        if i->empty: <-- HAS_EMPTY
        if i > 50: <-- HAS_OUTOF_RANGE
        new_ints[] = [] | i->do_stuff_to | null
    <- ['return_code': return_code ?? IS_OK, 'ints': new_ints]
}}}
        </td>
        <td valign="top" cellpadding="0">
{{{
function process_ints(ints)
    $new_ints = array();
    foreach($ints as $i) {
        if (empty($i)) {
            $return_code = HAS_EMPTY;
            break;
        }
        if ($i > 50) {
            $return_code = HAS_OUT_OF_RANGE;
            break;
        }
        $new_ints[] = do_stuff_to($i);
    }
    return array(
        'return_code' => isset($return_code) ? $return_code : IS_OK,
        'ints' => $new_ints,
    );
}}}
        </td>
    </tr>
    
    <tr>
        <td valign="top" cellpadding="0">
{{{
b = switch myvar
    case "zoo"
        <-- "uber"
    default
        <-- "nice"
echo b
}}}
        </td>
        <td valign="top" cellpadding="0">
{{{
switch ($myvar) {
    case "zoo":
        $b = "uber";
        break;
    default:
        $b = "nice";
        break;
}
echo $b;
}}}
        </td>
    </tr>
</table>
