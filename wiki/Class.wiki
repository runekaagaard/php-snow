#summary Description of classes and objects.
<wiki:toc/>

== Introduction ===
Classes and objects works the same way as in PHP, but the syntax has been dried
up and made a lot faster to type and easier to look at.

Some things have new names:
 * The single arrow `->` is replaced by the comma '`.`'.
 * `$this->` is now just a single prefixing comma '`.`'.
 * `self::` is now just two prefixing colons `::`.
 * `public`, `protected`, `private`, `static` and `const` have been shortenedto `pub`, `pro`, `pri`, `sta` and `con`.

`con`, `pub`, `pro` and `pri` are no longer declared for each class variable but 
are only used a maximum of one each with variables grouped below. The order of
them must be `con`, `pub`, `pro` and lastly `pri`. Other orderings will throw a
compile error.

Nested below `con`, `pub`, `pro` and `pri` keywords are an optional `sta` level.
Below that are groups of variable names optionally nested under similar types.
The types are written without the `@` like `str`, `flo`, etc.

Common for the grouping of `con`, `pub`, `pro`, `pri`, `sta`, variable type and
variable name is that when there is only one of a subgroup, the content below
must be moved to the same line.

Class variable declarations have access to constructor arguments, e.g. `myvar` 
and each other, e.g. `.myvar`. Circular dependencies will throw a compile error.
They also have access to function calls.

The constructor `__construct()` method is removed and instead constructor code
is placed below the `pub`, `pro`, `pri` and `con` keywords and above the first
method. The arguments to the constructor are moved above the class definition
and have the same syntax as a normal function.

The destructor method `__destruct()` is unchanged, but should be the last
method declaration in the class. Any other location will throw a compile error.

The default `pub` keyword can not be used in front of methods but `pro`, `pri`,
and `sta` still can.

== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    
<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0"><code language="php">
.num = .min - 2</code></td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0"><code language="php">
$this->num = $this->min - 2;</code></td></tr>

<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0"><code language="php">
echo .myvar | ::myconst</code></td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0"><code language="php">
echo $this->myvar . self::myconst;</code></td></tr>

<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0">
{{{
# Title about Foo
    Description about the class Foo.
@int x
    # A positive number below 100.
    0 < % < 100
@str s
    # A positive number below 10.
    0 < % < 10
class Foo extends Bar
    con int BAZ = 35
        # The bazness.
    pub
        int foo = 2 * x * ::BAZ
            # The fooness.
        int bar = .foo * 2
            # The variable bar.
        str s = s
            # A string.
    pro
        int x = x
        flo y = get_my_float(.x)
    pri int privar = 23

    # The constructor.
        Needs two args that bla.
    parent::__construct(x, s)

    pri fn output: echo "pure as snow"
}}}
</td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0">
{{{
/**
 * Title about Foo
 *
 * Description about the class Foo.
 */
class Foo extends Bar {
    /**
     * The bazness.
     *
     * @var int
     */
    const BAZ = 35;
    /**
     * The fooness.
     *
     * @var int
     */
    public $foo;
    /**
     * The variable bar.
     *
     * @var int
     */
    public $bar;
    /**
     * A string.
     *
     * @var string
     */
    public $s;
    protected $x;
    protected $y;
    private $privar = 23;

    /**
     * The constructor.
     * 
     * Needs two args that bla.
     *
     * @param int $x
     *   A positive number below 100.
     * @param int $s
     *   A positive number below 10.
     */
    public function __construct($x, $s) {
        if (!(0 < $x && $x < 100)) {
            throw new InvalidArgumentException;
        }
        if (!(0 < $s && $s < 10)) {
            throw new InvalidArgumentException;
        }
        $this->x = $x;
        $this->s = $s;
        $this->foo = 2 * $x * self::BAZ;
        $this->bar = $this->foo * 2;
        $this->y = get_my_float($this->x);
        parent::__construct($x, $s);
    }

    private function output() {
        echo "pure as snow";
    }
}
}}}
</td></tr>
    <tr>
        <td colspan="2"><strong>Disallowed code</strong></td>
    </tr>
    
<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0">
{{{
class Foo
    pri
        int
            bar
            baz
    pub
        str boz
    
}}}
</td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0">
The order must be `con`, `pub`, `pro` and `pri`.
</td></tr>

<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0">
{{{
class Foo
    pub
        str
            a = .b , "abc"
            b = .a , "abc"
}}}
</td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0">
Cyclical error. `a` and `b` depends on each other.
</td></tr>
</table>

== Examples ==
Below is an example of a FTP class.
{{{
# Class handling FTP operations.
    Wrapper on top of FTP protocol that enables file/directory listing,
    upload/download, etc.
@str host
    # The ftp host to connect to.
    !%->empty
@int port=21
    # The port to connect to.
    0 < % < 65536
@int timeout=30
    # Connect timeout, bail out if exceeded. 0 means wait forever.
    0 <= %
class Ftp
    con int
        OPT_TRANS_ASCII = FTP_ASCII
        OPT_TRANS_BINARY = FTP_BINARY
        OPT_TRANS_AUTO = 3
    pro
        arr
            ascii_types = ["text" "csv"]
            binary_types = ["jpg" "jpeg" "gif" "psd"]
        int default_transmode = ::OPT_TRANS_ASCII
        res conn

    # Constructor.
        Tries to connect to server or throws an exception.
    .conn = ftp_connect(host port timeout) ?! throw Exception(
        "Couldn't connect to host '{host}'")

    @str user
    @str pass
    fn login: <- ftp_login(.conn user pass)

    @str local
    @str remote
    @int trans_mode = ::OPT_TRANS_AUTO
    fn put
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_put(.conn local remote trans_mode) ?! throw Exception(
            "Couldn't get file '{remote}'")

    @str local
    @str remote
    @int trans_mode = ::OPT_TRANS_AUTO
    fn get
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_get(.conn local remote trans_mode) ?! throw Exception(
            "Couldn't get file '{remote}'")

    # Checks whether a file exists on the remote side.
    @str file
        # The filename to check for.
        !%->empty
    fn file_exists
        <- .conn->ftp_nlist(file->dirname)->in_array(file->basename)

    # Determine transfermode to use.
    @str file
    fn get_trans_mode
        for ext in .ascii_types
            <- ::OPT_TRANS_ASCII when file->substr(-ext->strlen) == ext
        for ext in .binary_types
            <- ::OPT_TRANS_BINARY when file->substr(-ext->strlen) == ext
        <- default_transmode

    fn close: <- ftp_close(.conn)

try
    ftp = Ftp("my.host")
    ftp.login("user" "pass")
    ftp.get("/remote/file" "/local/file")
catch Exception e
    e->var_dump
}}}
