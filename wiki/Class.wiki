#summary Description of classes and objects.
<wiki:toc/>

== Introduction ===
Classes an objects works the same way as in PHP, but the syntax has been dried
up and made a lot faster to type and easier to look at.

Some things have new names:
 * The single arrow `->` is replaced by the comma `.`.
 * `this.` is now just a single prefixing comma '`.`'.
 * `self::` is now just two prefixing colons `::`.
 * `public`, `protected`, `private`, `static` and `const` have been shortened to `pub`, `pro`, `pri`, `sta` and `con`.
 * Magic methods `__callStatic`, and `__toString` are now `__call_static`, and `__to_string`

`con`, `pub`, `pro` and `pri` are no longer declared for each class variable but 
are only used a maximum of one each with variables grouped below. The order of
them must be `con`, `pub`, `pro` and `pri` and other orderings will throw a
compile error.

Nested below `con`, `pub`, `pro` and `pri` keywords are an optional `sta` level.
Below that are groups of variable names nested under similar types. The types
are written without the "@" like `str`, `flo`, etc.

Common for the grouping of `con`, `pub`, `pro`, `pri`, `sta`, variable type and
variable name is that when their is only one of a subgroup, the content below
is moved to the same line.

Class variable declarations have access to constructor arguments, e.g. `myvar` 
and each other, e.g. `.myvar`. Circular dependencies will throw a compile error.
They also have access to function calls.

The constructor `__construct()` method is removed and instead constructor code
is placed below the `pub`, `pro`, `pri` and `con` keywords and above the first
method. The arguments to the constructor are moved above the class definition
and have the same syntax as a normal function.

The default `pub` keyword can not be used in front of methods but `pro`, `pri`,
and `sta` still can.

== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    
<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0"><code language="php">
.num = .min - 2</code></td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0"><code language="php">
$this->num = $this->min - 2;</code></td></tr>

<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0"><code language="php">
echo .myvar , ::myconst</code></td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0"><code language="php">
echo $this->myvar . self::myconst;</code></td></tr>

<wiki:comment>Snow example</wiki:comment>
<tr><td valign="top" cellpadding="0">
{{{
@int x
@str s
class Foo extends Bar
    con
        int BAZ = 35
    pub
        int foo = 2 * x * ::BAZ
        int bar = .foo * 2
        str s = s
    pro
        int x = x
        flo y = get_my_float(.x)
    pri int privar = 23
    
    parent::__construct(x, s)
    
    pri fn output: echo "pure as snow"
    
}}}
</td>
<wiki:comment>PHP example</wiki:comment>
<td valign="top" cellpadding="0">
{{{
// Docblocks omitted.
class Foo extends Bar {
    const BAZ = 35;
    public foo;
    public bar;
    public s;
    protected x;
    protected y;
    private privar = 23
    
    public function __construct($x, $s) {
        $this->x = $x;
        $this->s = $s;
        $this->foo = 2 * $x * self::BAZ;
        $this->bar = $this->foo * 2;
        $this->y = get_my_float($this->x);
        parent::__construct($x, $s);
    }
    
    private function output() {
        echo "pure as snow";
    }
}
}}}
</td></tr>
</table>

== Examples ==
Below is an example of a FTP class.
{{{
# Class handling FTP operations.
    Wrapper on top of FTP protocol that enables file/directory listing,
    upload/download, etc.
@str host
    # The ftp host to connect to.
    !%->empty
@int port=21
    # The port to connect to.
    0 < % < 65536
@int timeout=30
    # Connect timeout, bail out if exceeded. 0 means wait forever.
    0 <= %
class Ftp
    con int
        OPT_TRANS_ASCII = FTP_ASCII
        OPT_TRANS_BINARY = FTP_BINARY
        OPT_TRANS_AUTO = 3
    pub
        str
            host = host
            port = port
        int timeout = timeout
    pro
        arr
            ascii_types = ["text" "csv"]
            binary_types = ["jpg" "jpeg" "gif" "psd"]
        int default_transmode = ::OPT_TRANS_ASCII
        ConnectionResource conn # Instance of the class ConnectionResource.

    # Constructor.
        Tries to connect to server or throws an exception.
    .conn = ftp_connect(host port timeout) or throw Exception(
        "Couldn't connect to host '%host'")

    @str user
    @str pass
    fn login: return ftp_login(.conn user pass)

    @str local
    @str remote
    @int trans_mode
    fn put
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_put(.conn local remote trans_mode) or throw Exception(
            "Couldn't get file '%remote'")

    @str local
    @str remote
    @int trans_mode
    fn get
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_get(.conn local remote trans_mode) or throw Exception(
            "Couldn't get file '%remote'")

    # Checks whether a file exists on the remote side.
    @str file
        # The filename to check for.
        !%->empty
    fn file_exists
        list = ftp_nlist(.conn file->dirname)
        return list->in_array(file->basename)

    # Determine transfermode to use.
    @str file
    fn get_trans_mode
        for ext in .ascii_types
            return ::OPT_TRANS_ASCII when file->substr(-ext->strlen) == ext
        for ext in .binary_types
            return ::OPT_TRANS_BINARY when file->substr(-ext->strlen) == ext
        return default_transmode

    fn close: return ftp_close(.conn)

    fn __to_string: return "Ftp connection to {.host} on port {.port}."

try
    ftp = Ftp("my.host")
    ftp.login("user" "pass")
    ftp.get("/remote/file" "/local/file")
catch(Exception e)
    e->var_dump
}}}
