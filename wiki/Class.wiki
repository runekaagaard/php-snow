#summary Description of classes and objects.
<wiki:toc/>

== Introduction ===
Classes an objects works the same way as in PHP, but the syntax has been dried
up and made a lot faster to type and easier to look at.

Some things have new names:
 * The single arrow `->` is been replaced by the comma `.`.
 * `this.` is now just a single prefixing comma `.`.
 * `self::` is now just two prefixing colons `::`.
 * `public`, `protected`, `private`, `static` and `const` have been shortened to `pub`, `pro`, `pri`, `sta` and `con`.
 * `__callStatic`, and `__toString` is now `__call_static`, and `__to_string`

`public`, `protected`, `private` and `const` are no longer declared for each
class variable but are grouped in the top of the class.

The constructor `__construct()` method is removed and instead constructor code
is placed below the `pub`, `pro`, `pri` and `con` keywords and above the first
method. The arguments to the constructor are moved above the class definition
and have the same syntax as a normal function. An extra feature is the
`@toclass` annotation that saves the argument to the class as a public variable.

The `pub` keyword can not be used in front of methods but `pro`, `pri`, and
`sta` still can.

== Examples ==
Below is an example of a FTP class.
{{{
# Class handling FTP operations.
    Wrapper on top of FTP protocol that enables file/directory listing,
    upload/download, etc.
@str @toclass host
    # The ftp host to connect to.
    !%->empty
@int @toclass port=21
    # The port to connect to.
    0 < % < 65536
@int @toclass timeout=30
    # Connect timeout, bail out if exceeded. 0 means wait forever.
    0 <= %
class Ftp
    con int
        OPT_TRANS_ASCII = FTP_ASCII
        OPT_TRANS_BINARY = FTP_BINARY
        OPT_TRANS_AUTO = 3
    pro
        arr
            ascii_types = ["text" "csv"]
            binary_types = ["jpg" "jpeg" "gif" "psd"]
        int default_transmode = ::OPT_TRANS_ASCII
        ConnectionResource conn # Instance of the class ConnectionResource.

    # Constructor.
        Tries to connect to server or throws an exception.
    .conn = ftp_connect(host port timeout) or throw Exception(
        "Couldn't connect to host '%host'")

    @str user
    @str pass
    fn login: return ftp_login(.conn user pass)

    @str local
    @str remote
    @int trans_mode
    fn put
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_put(.conn local remote trans_mode) or throw Exception(
            "Couldn't get file '%remote'")

    @str local
    @str remote
    @int trans_mode
    fn get
        trans_mode = get_trans_mode(local) when trans_mode == ::OPT_TRANS_AUTO
        ftp_get(.conn local remote trans_mode) or throw Exception(
            "Couldn't get file '%remote'")

    # Checks whether a file exists on the remote side.
    @str file
        # The filename to check for.
        !%->empty
    fn file_exists
        list = ftp_nlist(.conn file->dirname)
        return list->in_array(file->basename)

    # Determine transfermode to use.
    @str file
    fn get_trans_mode
        for ext in .ascii_types
            return ::OPT_TRANS_ASCII when file->substr(-ext->strlen) == ext
        for ext in .binary_types
            return ::OPT_TRANS_BINARY when file->substr(-ext->strlen) == ext
        return default_transmode

    fn close: return ftp_close(.conn)

    fn __to_string: return "Ftp connection to {.host} on port {.port}."

try
    ftp = Ftp("my.host")
    ftp.login("user" "pass")
    ftp.get("/remote/file" "/local/file")
catch(Exception e)
    e->var_dump
}}}