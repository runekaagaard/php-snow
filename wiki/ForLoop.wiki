#summary "for" loop documentation.
<wiki:toc/>

== Introduction ===
Good old (t)rusty `foreach` has left the building, welcome the new and improved `for`.

== Definition ==
{{{
for_stmt ::=  "for" variable [variable] "in" expression_list ["putin" variable=expression_list]
for_stmt ::=  "for" variable "=" expression_list "to"|"downto" expression_list [step expression_list] ["putin" variable=expression_list]
}}}

== Matrix ==
=== Oneliners ===
|| *Snow*                      || *PHP*                                      ||
|| *in*                        || *foreach*                                  ||
|| for v in arr                || foreach ($array as $v) {                   ||
|| for v k in arr              || foreach ($array as $v => $k) {             ||
|| for v k in 'a' to 'b'       || foreach (range('a', 'b') as $v => $k) {    ||
|| for v k in 1 to 10          || foreach (range(1, 10) as $v => $k) {       ||
|| *=*                         || *for* (numeric only)                       ||
|| for v = 1 to 10             || for ($v=1, $v<11, ++$i) {                  ||
|| for v = 10 downto 1         || for ($v=10, $v<-1, --$i) {                 ||
|| for v = 'a' to 'b'          || ERROR                                      ||

=== Using "putin" ===

==== Snow ====
{{{
for v k in arr putin a=''
    .= "%k: %v"
}}}
==== PHP ====
{{{
$a = '';
foreach ($arr as $k => $v) {
    $a .= "%k: %v";
}
}}}
==== Snow ====
{{{
return for v k in arr putin a=''
    .= "%k: %v"
}}}
==== PHP ====
{{{
$a = '';
foreach ($arr as $k => $v) {
    $a .= "%k: %v";
}
return $a;
}}}

== Examples ==
We'll start with a basic example and work our way done to some more advanced stuff.
=== 1) ===
Iterate over all the elements in a and print each value on a separate line.
{{{
a = [1 2 3]
for v in a
    echo v, "\n"
}}}
Output:
{{{
1
2
3
}}}

=== 2) ===
Iterate over all the elements in a and prints each elements key and value on seperate lines.
{{{
a = [5:1 6:2 7:3]
for k v in a
    echo k, ": ", v, "\n
}}}
Output:
{{{
5: 1
6: 2
7: 3
}}}

=== 3) ===
Factorial implementation using the [Putin putin] keyword.
{{{
fn factorial(int i)
    return 1 when i == 0
    return for i downto 3 putin a = i: *= i - 1
echo fn(5)
}}}
Output:
{{{
120
}}}

=== 4) ===
Specifying character ranges
{{{
for char in 'a' to 'c'
    print char,"\n"
}}}
Output:
{{{
a
b
c
}}}