#summary "for" loop documentation.
<wiki:toc/>

== Introduction ===
Good old (t)rusty `foreach` has left the building, welcome the new and improved `for`. 

`for` comes in two variants. The first is of the form "for x *in* a to b" or "for x *in* arr" and compiles as `foreach`. The "a to b" part compiles to "range(a,b)". The second is of the form "for x *=* a to b" and compiles to `for`. _Notice that this only works with numeric values._

== Definition ==
{{{
for_stmt ::=  "for" variable [variable] "in" expression_list ["putin" variable=expression_list]
for_stmt ::=  "for" variable "=" expression_list "to"|"downto" expression_list [step expression_list] ["putin" variable=expression_list]
}}}

== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    <tr>
        <td><strong>in</strong></td>
        <td><strong>foreach</strong></td>
    </tr>
    <tr>
        <td>for v in arr</td>
        <td>foreach ($array as $v) {</td>
    </tr>
    <tr>
        <td>for v k in arr</td>
        <td>foreach ($array as $v =>$k) {</td>
    </tr>

    <tr>
        <td>for v k in 'a' to 'b'</td>
        <td>foreach (range('a', 'b') as $v => $k) {</td>
    </tr>

    <tr>
        <td>for v k in 1 to 10</td>
        <td>foreach (range(1, 10) as $v => $k) {</td>
    </tr>

    <tr>
        <td><strong>=</strong></td>
        <td><strong>for</strong>(numeric only)</td>
    </tr>

    <tr>
        <td>for i = 1 to 10</td>
        <td>for ($i=1; $i<11; ++$i) {</td>
    </tr>

    <tr>
        <td>for i = 10 downto 1</td>
        <td>for ($i=10; $i>0; --$i) {</td>
    </tr>

    <tr>
        <td>for i = a to somefunc()</td>
        <td>for ($i=$a; $i<somefunc()+1; ++$i) {</td>
    </tr>
    <tr>
        <td>for i = 'a' to 'b'</td>
        <td>ERROR</td>
    </tr>
    <tr>
        <td><strong>Using "putin"</strong></td>
        <td></td>
    </tr>
    <tr>
<td valign="top" cellpadding="0"><code language="php">for v k in arr putin a=''
    .= "%k: %v"</code>
        </td>
<td valign="top" cellpadding="0"><code language="php">$a = '';
foreach ($arr as $k => $v) {
    $a .= "%k: %v";
}</code>
        </td>
    </tr>
    <tr>
<td valign="top" cellpadding="0"><code language="php">return for v k in arr putin a=''
    .= "%k: %v"</code>
        </td>
<td valign="top" cellpadding="0"><code language="php">$a = '';
foreach ($arr as $k => $v) {
    $a .= "%k: %v";
}
return $a;</code>
        </td>
    </tr>
</table>

== Examples ==
We'll start with a basic example and work our way done to some more advanced stuff.
=== 1) ===
Iterate over all the elements in a and print each value on a separate line.
{{{
a = [1 2 3]
for v in a
    echo v, "\n"
}}}
Output:
{{{
1
2
3
}}}

=== 2) ===
Iterate over all the elements in a and prints each elements key and value on seperate lines.
{{{
a = [5:1 6:2 7:3]
for k v in a
    echo k, ": ", v, "\n
}}}
Output:
{{{
5: 1
6: 2
7: 3
}}}

=== 3) ===
Factorial implementation using the [Putin putin] keyword.
{{{
fn factorial(int i)
    return 1 when i == 0
    return for i downto 3 putin a = i: *= i - 1
echo fn(5)
}}}
Output:
{{{
120
}}}

=== 4) ===
Specifying character ranges
{{{
for char in 'a' to 'c'
    print char,"\n"
}}}
Output:
{{{
a
b
c
}}}