#summary Description of the use of conditionals in Snow
<wiki:toc/>

This page is currently being reconstructed.

== Introduction ==
Conditionals has been overhauled, specifically:
 
 * Parenthesis `()` are no longer required around the expression.
 * The `case` keyword is removed in the `switch` statement.
 * `break` is the default behaviour in a `case` block and can be reversed by the new keyword `fallthru`.
 * `when` is introduced as a postfix `if` sentence.
 * `elseif` and `else if` has been changed to `elif`.
 
== Matrix ==
<table border="1" cellpadding="5">
    <tr>
        <td><strong>Snow</strong></td>
        <td><strong>PHP</strong></td>
    </tr>
    <tr>
        <td>
{{{
if a > 0
    echo "a is positive."
elif a == 0
    echo "a is zero."
else
    echo "a is negative."
}}}        
        </td>
        <td>
{{{
if ($a > 0) {
    echo "a is positive.";
} elseif ($a == 0) {
    echo "a is zero.";
} else {
    echo "a is negative.";
}
}}}        
        </td>
    </tr>
        <tr>
        <td>
{{{
if (a_very_long_variable_name->and_a_very_long_function_name and
                    also_a_very_long_variable_name->normal_func_name)
    pass
}}}        
        </td>
        <td>
{{{
if (and_a_very_long_function_name and($a_very_long_variable_name) &&
normal_func_name($also_a_very_long_variable_name)) {
    // Stub.
}
}}}        
        </td>
    </tr>
            <tr>
        <td>
{{{
a = switch foo
    'bar': <- 32
    'baz': fallthru
    'boz': <- 42
    default: <- 52
}}}        
        </td>
        <td>
{{{
switch ($foo) {
    case 'bar': 
        $a = 32;
        break;
    case 'baz':
    case 'boz':
        $a = 42;
    default:
        $a = 52;
}
}}}        
        </td>
    </tr>
    <tr>
        <td>
{{{
a = b when c = d
}}}        
        </td>
        <td>
{{{
if ($c = $d) {
    $a = $b;
}
}}}        
        </td>
    </tr>    
</table>

==switch==
The basic form of switch is
is:
{{{
switch <expr>
    0
        statement
    -1
        fallthru
    1
        statement
    'shortform': statement
    default
        statement
}}}
Notice that the case keyword has been removed.

Also new is that each case statement per default has an implied `break` statement 
added in the end. To revert this behaviour use the `fallthru` keyword, it's 
effect is exactly the opposite of `break`. Instead of specifying where to stop 
evaluation of the following statements, you tell the parser explicitly to 'fall 
through' to the next `case`. The `break` keyword can still be used normally, 
e.g. to break early in a condition.

{{{
# Example #1:
a = 1
switch a
    0
        echo 0
    1
        echo 1
    2
        echo 2
# prints: 1
}}}
{{{
# Example #2:
a = 1
switch a
    0
        echo 0
        fallthru
    1
        echo 1
        fallthru
    2
        echo 2
        fallthru
# prints: 12
}}}

==When==
Snow introduces a new keyword `when` that works as a postfix `if` sentence.
